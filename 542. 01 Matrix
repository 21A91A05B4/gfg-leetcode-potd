class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int n=mat.size();
        int m=mat[0].size();
        vector<vector<int>>dist(n,vector<int>(m,0));
        int vis[n][m];
        queue<pair<pair<int,int>,int>>q;
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(mat[i][j]==0){
                    q.push({{i,j},0});
                    vis[i][j]=1;
                }
                else{
                    vis[i][j]=0;
                }
            }
        }

        int drow[]={-1,0,1,0};
        int dcol[]={0,1,0,-1};

        while(!q.empty()){
            int a=q.front().first.first;
            int b=q.front().first.second;
            int steps=q.front().second;
            q.pop();
            dist[a][b]=steps;
            for(int k = 0  ; k < 4 ; k++){
                int a1 = a + drow[k];
                int a2 = b + dcol[k];
                if(a1>=0 and a1<n and a2>=0 and a2<m and vis[a1][a2]==0){
                    q.push({{a1,a2},steps+1});
                    vis[a1][a2]=1;
                }
            }
        }
        return dist;
    }
};
