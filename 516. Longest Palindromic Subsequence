class Solution {
public:
    // int palin(string &s){
    //     string r=s;
    //     reverse(s.begin(),s.end());
    //     if(r==s) return 1;
    //     return 0;
    // }
    int dp[1001][1001];
    int fun(string  &r,string &s,int i,int j){
        if(i==s.size() or j==s.size()) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        if(r[i]==s[j]) return dp[i][j]=1+fun(r,s,i+1,j+1);
        else{
            return dp[i][j]=max(fun(r,s,i+1,j),fun(r,s,i,j+1));
        }
        
    }
    int longestPalindromeSubseq(string s) {
        string r=s;
        memset(dp,-1,sizeof(dp));
        reverse(s.begin(),s.end());
        int p=fun(r,s,0,0);
        return p;
    }
};
